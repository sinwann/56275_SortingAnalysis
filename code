
#include <iostream>
#include <ctime> // For clock()
using namespace std;

// Bubble Sort
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; ++i)
        for (int j = 0; j < n-i-1; ++j)
            if (arr[j] > arr[j+1])
                swap(arr[j], arr[j+1]);
}

// Selection Sort
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n-1; ++i) {
        int min_idx = i;
        for (int j = i+1; j < n; ++j)
            if (arr[j] < arr[min_idx])
                min_idx = j;
        swap(arr[min_idx], arr[i]);
    }
}

// Insertion Sort
void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i-1;
        while (j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            --j;
        }
        arr[j+1] = key;
    }
}

// Merge function for Merge Sort
void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    int* L = new int[n1];
    int* R = new int[n2];

    for (int i = 0; i < n1; ++i)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }

    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];

    delete[] L;
    delete[] R;
}

// Merge Sort
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

// Function to copy arrays
void copyArray(int source[], int destination[], int n) {
    for (int i = 0; i < n; ++i)
        destination[i] = source[i];
}

// Measure execution time
void measureSortTime(void (*sortFunc)(int[], int), int arr[], int n, const char* sortName) {
    const int runs = 5;
    double totalDuration = 0;

    int temp[1000]; // Temp array

    for (int i = 0; i < runs; ++i) {
        copyArray(arr, temp, n);

        clock_t start = clock();
        sortFunc(temp, n);
        clock_t end = clock();

        double duration = (double)(end - start) * 1000 / CLOCKS_PER_SEC; // milliseconds
        totalDuration += duration;
    }

    double averageDuration = totalDuration / runs;

    cout << sortName << " on size " << n << " took average " << averageDuration << " milliseconds.\n";
}

void measureMergeSortTime(int arr[], int n) {
    const int runs = 5;
    double totalDuration = 0;

    int temp[1000];

    for (int i = 0; i < runs; ++i) {
        copyArray(arr, temp, n);

        clock_t start = clock();
        mergeSort(temp, 0, n-1);
        clock_t end = clock();

        double duration = (double)(end - start) * 1000 / CLOCKS_PER_SEC;
        totalDuration += duration;
    }

    double averageDuration = totalDuration / runs;
    cout << "Merge Sort on size " << n << " took average " << averageDuration << " milliseconds.\n";
}

int main() {
    int arr1[] = {1,2,3,4,5};
    int arr2[] = {1,2,3,4,5,6,7,8,9,10};
    int arr3[] = {
        1,2,3,4,5,6,7,8,9,10,
        11,12,13,14,15,16,17,18,19,20,
        21,22,23,24,25,26,27,28,29,30,
        31,32,33,34,35,36,37,38,39,40,
        41,42,43,44,45,46,47,48,49,50
    };
    int arr4[] = {
        1,2,3,4,5,6,7,8,9,10,
        11,12,13,14,15,16,17,18,19,20,
        21,22,23,24,25,26,27,28,29,30,
        31,32,33,34,35,36,37,38,39,40,
        41,42,43,44,45,46,47,48,49,50,
        51,52,53,54,55,56,57,58,59,60,
        61,62,63,64,65,66,67,68,69,70,
        71,72,73,74,75,76,77,78,79,80,
        81,82,83,84,85,86,87,88,89,90,
        91,92,93,94,95,96,97,98,99,100
    };

    int sizes[] = {5, 10, 50, 100};
    int* arrays[] = {arr1, arr2, arr3, arr4};

    for (int i = 0; i < 4; ++i) {
        measureSortTime(bubbleSort, arrays[i], sizes[i], "Bubble Sort");
        measureSortTime(selectionSort, arrays[i], sizes[i], "Selection Sort");
        measureSortTime(insertionSort, arrays[i], sizes[i], "Insertion Sort");
        measureMergeSortTime(arrays[i], sizes[i]);
        cout << "------------------------------------------------\n";
    }

    return 0;
}
